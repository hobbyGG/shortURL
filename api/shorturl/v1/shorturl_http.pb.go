// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.1
// source: api/shorturl/v1/shorturl.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShortURLRedirect = "/api.shorturl.v1.ShortURL/Redirect"

type ShortURLHTTPServer interface {
	// Redirect 根据短链跳转至指定地址
	Redirect(context.Context, *RedirectRequest) (*RedirectResponse, error)
}

func RegisterShortURLHTTPServer(s *http.Server, srv ShortURLHTTPServer) {
	r := s.Route("/")
	r.GET("/{shortURL}", _ShortURL_Redirect0_HTTP_Handler(srv))
}

func _ShortURL_Redirect0_HTTP_Handler(srv ShortURLHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RedirectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortURLRedirect)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Redirect(ctx, req.(*RedirectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RedirectResponse)
		return ctx.Result(200, reply)
	}
}

type ShortURLHTTPClient interface {
	Redirect(ctx context.Context, req *RedirectRequest, opts ...http.CallOption) (rsp *RedirectResponse, err error)
}

type ShortURLHTTPClientImpl struct {
	cc *http.Client
}

func NewShortURLHTTPClient(client *http.Client) ShortURLHTTPClient {
	return &ShortURLHTTPClientImpl{client}
}

func (c *ShortURLHTTPClientImpl) Redirect(ctx context.Context, in *RedirectRequest, opts ...http.CallOption) (*RedirectResponse, error) {
	var out RedirectResponse
	pattern := "/{shortURL}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortURLRedirect))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
