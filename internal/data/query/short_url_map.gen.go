// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shortURL/internal/data/model"
)

func newShortURLMap(db *gorm.DB, opts ...gen.DOOption) shortURLMap {
	_shortURLMap := shortURLMap{}

	_shortURLMap.shortURLMapDo.UseDB(db, opts...)
	_shortURLMap.shortURLMapDo.UseModel(&model.ShortURLMap{})

	tableName := _shortURLMap.shortURLMapDo.TableName()
	_shortURLMap.ALL = field.NewAsterisk(tableName)
	_shortURLMap.ID = field.NewInt64(tableName, "id")
	_shortURLMap.CreateAt = field.NewTime(tableName, "create_at")
	_shortURLMap.UpdateAt = field.NewTime(tableName, "update_at")
	_shortURLMap.IDDel = field.NewInt32(tableName, "id_del")
	_shortURLMap.Lurl = field.NewString(tableName, "lurl")
	_shortURLMap.LurlMd5 = field.NewString(tableName, "lurl_md5")
	_shortURLMap.Surl = field.NewString(tableName, "surl")

	_shortURLMap.fillFieldMap()

	return _shortURLMap
}

type shortURLMap struct {
	shortURLMapDo shortURLMapDo

	ALL      field.Asterisk
	ID       field.Int64
	CreateAt field.Time
	UpdateAt field.Time
	IDDel    field.Int32
	Lurl     field.String
	LurlMd5  field.String
	Surl     field.String

	fieldMap map[string]field.Expr
}

func (s shortURLMap) Table(newTableName string) *shortURLMap {
	s.shortURLMapDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shortURLMap) As(alias string) *shortURLMap {
	s.shortURLMapDo.DO = *(s.shortURLMapDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shortURLMap) updateTableName(table string) *shortURLMap {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.IDDel = field.NewInt32(table, "id_del")
	s.Lurl = field.NewString(table, "lurl")
	s.LurlMd5 = field.NewString(table, "lurl_md5")
	s.Surl = field.NewString(table, "surl")

	s.fillFieldMap()

	return s
}

func (s *shortURLMap) WithContext(ctx context.Context) IShortURLMapDo {
	return s.shortURLMapDo.WithContext(ctx)
}

func (s shortURLMap) TableName() string { return s.shortURLMapDo.TableName() }

func (s shortURLMap) Alias() string { return s.shortURLMapDo.Alias() }

func (s shortURLMap) Columns(cols ...field.Expr) gen.Columns { return s.shortURLMapDo.Columns(cols...) }

func (s *shortURLMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shortURLMap) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["id_del"] = s.IDDel
	s.fieldMap["lurl"] = s.Lurl
	s.fieldMap["lurl_md5"] = s.LurlMd5
	s.fieldMap["surl"] = s.Surl
}

func (s shortURLMap) clone(db *gorm.DB) shortURLMap {
	s.shortURLMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shortURLMap) replaceDB(db *gorm.DB) shortURLMap {
	s.shortURLMapDo.ReplaceDB(db)
	return s
}

type shortURLMapDo struct{ gen.DO }

type IShortURLMapDo interface {
	gen.SubQuery
	Debug() IShortURLMapDo
	WithContext(ctx context.Context) IShortURLMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShortURLMapDo
	WriteDB() IShortURLMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShortURLMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShortURLMapDo
	Not(conds ...gen.Condition) IShortURLMapDo
	Or(conds ...gen.Condition) IShortURLMapDo
	Select(conds ...field.Expr) IShortURLMapDo
	Where(conds ...gen.Condition) IShortURLMapDo
	Order(conds ...field.Expr) IShortURLMapDo
	Distinct(cols ...field.Expr) IShortURLMapDo
	Omit(cols ...field.Expr) IShortURLMapDo
	Join(table schema.Tabler, on ...field.Expr) IShortURLMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShortURLMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShortURLMapDo
	Group(cols ...field.Expr) IShortURLMapDo
	Having(conds ...gen.Condition) IShortURLMapDo
	Limit(limit int) IShortURLMapDo
	Offset(offset int) IShortURLMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShortURLMapDo
	Unscoped() IShortURLMapDo
	Create(values ...*model.ShortURLMap) error
	CreateInBatches(values []*model.ShortURLMap, batchSize int) error
	Save(values ...*model.ShortURLMap) error
	First() (*model.ShortURLMap, error)
	Take() (*model.ShortURLMap, error)
	Last() (*model.ShortURLMap, error)
	Find() ([]*model.ShortURLMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShortURLMap, err error)
	FindInBatches(result *[]*model.ShortURLMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ShortURLMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShortURLMapDo
	Assign(attrs ...field.AssignExpr) IShortURLMapDo
	Joins(fields ...field.RelationField) IShortURLMapDo
	Preload(fields ...field.RelationField) IShortURLMapDo
	FirstOrInit() (*model.ShortURLMap, error)
	FirstOrCreate() (*model.ShortURLMap, error)
	FindByPage(offset int, limit int) (result []*model.ShortURLMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShortURLMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shortURLMapDo) Debug() IShortURLMapDo {
	return s.withDO(s.DO.Debug())
}

func (s shortURLMapDo) WithContext(ctx context.Context) IShortURLMapDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shortURLMapDo) ReadDB() IShortURLMapDo {
	return s.Clauses(dbresolver.Read)
}

func (s shortURLMapDo) WriteDB() IShortURLMapDo {
	return s.Clauses(dbresolver.Write)
}

func (s shortURLMapDo) Session(config *gorm.Session) IShortURLMapDo {
	return s.withDO(s.DO.Session(config))
}

func (s shortURLMapDo) Clauses(conds ...clause.Expression) IShortURLMapDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shortURLMapDo) Returning(value interface{}, columns ...string) IShortURLMapDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shortURLMapDo) Not(conds ...gen.Condition) IShortURLMapDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shortURLMapDo) Or(conds ...gen.Condition) IShortURLMapDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shortURLMapDo) Select(conds ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shortURLMapDo) Where(conds ...gen.Condition) IShortURLMapDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shortURLMapDo) Order(conds ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shortURLMapDo) Distinct(cols ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shortURLMapDo) Omit(cols ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shortURLMapDo) Join(table schema.Tabler, on ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shortURLMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shortURLMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shortURLMapDo) Group(cols ...field.Expr) IShortURLMapDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shortURLMapDo) Having(conds ...gen.Condition) IShortURLMapDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shortURLMapDo) Limit(limit int) IShortURLMapDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shortURLMapDo) Offset(offset int) IShortURLMapDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shortURLMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShortURLMapDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shortURLMapDo) Unscoped() IShortURLMapDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shortURLMapDo) Create(values ...*model.ShortURLMap) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shortURLMapDo) CreateInBatches(values []*model.ShortURLMap, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shortURLMapDo) Save(values ...*model.ShortURLMap) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shortURLMapDo) First() (*model.ShortURLMap, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortURLMap), nil
	}
}

func (s shortURLMapDo) Take() (*model.ShortURLMap, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortURLMap), nil
	}
}

func (s shortURLMapDo) Last() (*model.ShortURLMap, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortURLMap), nil
	}
}

func (s shortURLMapDo) Find() ([]*model.ShortURLMap, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShortURLMap), err
}

func (s shortURLMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShortURLMap, err error) {
	buf := make([]*model.ShortURLMap, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shortURLMapDo) FindInBatches(result *[]*model.ShortURLMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shortURLMapDo) Attrs(attrs ...field.AssignExpr) IShortURLMapDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shortURLMapDo) Assign(attrs ...field.AssignExpr) IShortURLMapDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shortURLMapDo) Joins(fields ...field.RelationField) IShortURLMapDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shortURLMapDo) Preload(fields ...field.RelationField) IShortURLMapDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shortURLMapDo) FirstOrInit() (*model.ShortURLMap, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortURLMap), nil
	}
}

func (s shortURLMapDo) FirstOrCreate() (*model.ShortURLMap, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShortURLMap), nil
	}
}

func (s shortURLMapDo) FindByPage(offset int, limit int) (result []*model.ShortURLMap, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shortURLMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shortURLMapDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shortURLMapDo) Delete(models ...*model.ShortURLMap) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shortURLMapDo) withDO(do gen.Dao) *shortURLMapDo {
	s.DO = *do.(*gen.DO)
	return s
}
